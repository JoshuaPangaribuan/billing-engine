// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	context "context"

	entity "github.com/JoshuaPangaribuan/billing-engine/internal/billing-engine/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockCreateCustomerRepository is an autogenerated mock type for the CreateCustomerRepository type
type MockCreateCustomerRepository struct {
	mock.Mock
}

type MockCreateCustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateCustomerRepository) EXPECT() *MockCreateCustomerRepository_Expecter {
	return &MockCreateCustomerRepository_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function with given fields: ctx, customer
func (_m *MockCreateCustomerRepository) CreateCustomer(ctx context.Context, customer entity.Customer) (entity.Customer, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Customer) (entity.Customer, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Customer) entity.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Customer) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateCustomerRepository_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type MockCreateCustomerRepository_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - customer entity.Customer
func (_e *MockCreateCustomerRepository_Expecter) CreateCustomer(ctx interface{}, customer interface{}) *MockCreateCustomerRepository_CreateCustomer_Call {
	return &MockCreateCustomerRepository_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", ctx, customer)}
}

func (_c *MockCreateCustomerRepository_CreateCustomer_Call) Run(run func(ctx context.Context, customer entity.Customer)) *MockCreateCustomerRepository_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Customer))
	})
	return _c
}

func (_c *MockCreateCustomerRepository_CreateCustomer_Call) Return(_a0 entity.Customer, _a1 error) *MockCreateCustomerRepository_CreateCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateCustomerRepository_CreateCustomer_Call) RunAndReturn(run func(context.Context, entity.Customer) (entity.Customer, error)) *MockCreateCustomerRepository_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateCustomerRepository creates a new instance of MockCreateCustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateCustomerRepository {
	mock := &MockCreateCustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
