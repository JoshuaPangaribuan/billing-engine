// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIsDelinquentRepository is an autogenerated mock type for the IsDelinquentRepository type
type MockIsDelinquentRepository struct {
	mock.Mock
}

type MockIsDelinquentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIsDelinquentRepository) EXPECT() *MockIsDelinquentRepository_Expecter {
	return &MockIsDelinquentRepository_Expecter{mock: &_m.Mock}
}

// GetInstallmentsForDelinquency provides a mock function with given fields: ctx, loanID
func (_m *MockIsDelinquentRepository) GetInstallmentsForDelinquency(ctx context.Context, loanID uint64) ([]struct {
	WeekNumber int64
	Status     string
}, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallmentsForDelinquency")
	}

	var r0 []struct {
		WeekNumber int64
		Status     string
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]struct {
		WeekNumber int64
		Status     string
	}, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []struct {
		WeekNumber int64
		Status     string
	}); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]struct {
				WeekNumber int64
				Status     string
			})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallmentsForDelinquency'
type MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call struct {
	*mock.Call
}

// GetInstallmentsForDelinquency is a helper method to define mock.On call
//   - ctx context.Context
//   - loanID uint64
func (_e *MockIsDelinquentRepository_Expecter) GetInstallmentsForDelinquency(ctx interface{}, loanID interface{}) *MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call {
	return &MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call{Call: _e.mock.On("GetInstallmentsForDelinquency", ctx, loanID)}
}

func (_c *MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call) Run(run func(ctx context.Context, loanID uint64)) *MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call) Return(_a0 []struct {
	WeekNumber int64
	Status     string
}, _a1 error) *MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call) RunAndReturn(run func(context.Context, uint64) ([]struct {
	WeekNumber int64
	Status     string
}, error)) *MockIsDelinquentRepository_GetInstallmentsForDelinquency_Call {
	_c.Call.Return(run)
	return _c
}

// IsDelinquent provides a mock function with given fields: ctx, loanID
func (_m *MockIsDelinquentRepository) IsDelinquent(ctx context.Context, loanID uint64) (bool, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for IsDelinquent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIsDelinquentRepository_IsDelinquent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDelinquent'
type MockIsDelinquentRepository_IsDelinquent_Call struct {
	*mock.Call
}

// IsDelinquent is a helper method to define mock.On call
//   - ctx context.Context
//   - loanID uint64
func (_e *MockIsDelinquentRepository_Expecter) IsDelinquent(ctx interface{}, loanID interface{}) *MockIsDelinquentRepository_IsDelinquent_Call {
	return &MockIsDelinquentRepository_IsDelinquent_Call{Call: _e.mock.On("IsDelinquent", ctx, loanID)}
}

func (_c *MockIsDelinquentRepository_IsDelinquent_Call) Run(run func(ctx context.Context, loanID uint64)) *MockIsDelinquentRepository_IsDelinquent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockIsDelinquentRepository_IsDelinquent_Call) Return(_a0 bool, _a1 error) *MockIsDelinquentRepository_IsDelinquent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIsDelinquentRepository_IsDelinquent_Call) RunAndReturn(run func(context.Context, uint64) (bool, error)) *MockIsDelinquentRepository_IsDelinquent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIsDelinquentRepository creates a new instance of MockIsDelinquentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIsDelinquentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIsDelinquentRepository {
	mock := &MockIsDelinquentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
