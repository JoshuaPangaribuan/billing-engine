// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	driver "database/sql/driver"

	mock "github.com/stretchr/testify/mock"
)

// MockUpdateEntity is an autogenerated mock type for the UpdateEntity type
type MockUpdateEntity struct {
	mock.Mock
}

type MockUpdateEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateEntity) EXPECT() *MockUpdateEntity_Expecter {
	return &MockUpdateEntity_Expecter{mock: &_m.Mock}
}

// MappedValues provides a mock function with no fields
func (_m *MockUpdateEntity) MappedValues() map[string]driver.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MappedValues")
	}

	var r0 map[string]driver.Value
	if rf, ok := ret.Get(0).(func() map[string]driver.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]driver.Value)
		}
	}

	return r0
}

// MockUpdateEntity_MappedValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MappedValues'
type MockUpdateEntity_MappedValues_Call struct {
	*mock.Call
}

// MappedValues is a helper method to define mock.On call
func (_e *MockUpdateEntity_Expecter) MappedValues() *MockUpdateEntity_MappedValues_Call {
	return &MockUpdateEntity_MappedValues_Call{Call: _e.mock.On("MappedValues")}
}

func (_c *MockUpdateEntity_MappedValues_Call) Run(run func()) *MockUpdateEntity_MappedValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUpdateEntity_MappedValues_Call) Return(_a0 map[string]driver.Value) *MockUpdateEntity_MappedValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdateEntity_MappedValues_Call) RunAndReturn(run func() map[string]driver.Value) *MockUpdateEntity_MappedValues_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateEntity creates a new instance of MockUpdateEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateEntity {
	mock := &MockUpdateEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
