// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	driver "database/sql/driver"

	mock "github.com/stretchr/testify/mock"
)

// MockEntity is an autogenerated mock type for the Entity type
type MockEntity struct {
	mock.Mock
}

type MockEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntity) EXPECT() *MockEntity_Expecter {
	return &MockEntity_Expecter{mock: &_m.Mock}
}

// Columns provides a mock function with no fields
func (_m *MockEntity) Columns() []interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Columns")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockEntity_Columns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Columns'
type MockEntity_Columns_Call struct {
	*mock.Call
}

// Columns is a helper method to define mock.On call
func (_e *MockEntity_Expecter) Columns() *MockEntity_Columns_Call {
	return &MockEntity_Columns_Call{Call: _e.mock.On("Columns")}
}

func (_c *MockEntity_Columns_Call) Run(run func()) *MockEntity_Columns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_Columns_Call) Return(_a0 []interface{}) *MockEntity_Columns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntity_Columns_Call) RunAndReturn(run func() []interface{}) *MockEntity_Columns_Call {
	_c.Call.Return(run)
	return _c
}

// DriverValues provides a mock function with no fields
func (_m *MockEntity) DriverValues() []driver.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DriverValues")
	}

	var r0 []driver.Value
	if rf, ok := ret.Get(0).(func() []driver.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Value)
		}
	}

	return r0
}

// MockEntity_DriverValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DriverValues'
type MockEntity_DriverValues_Call struct {
	*mock.Call
}

// DriverValues is a helper method to define mock.On call
func (_e *MockEntity_Expecter) DriverValues() *MockEntity_DriverValues_Call {
	return &MockEntity_DriverValues_Call{Call: _e.mock.On("DriverValues")}
}

func (_c *MockEntity_DriverValues_Call) Run(run func()) *MockEntity_DriverValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_DriverValues_Call) Return(_a0 []driver.Value) *MockEntity_DriverValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntity_DriverValues_Call) RunAndReturn(run func() []driver.Value) *MockEntity_DriverValues_Call {
	_c.Call.Return(run)
	return _c
}

// MappedValues provides a mock function with no fields
func (_m *MockEntity) MappedValues() map[string]driver.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MappedValues")
	}

	var r0 map[string]driver.Value
	if rf, ok := ret.Get(0).(func() map[string]driver.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]driver.Value)
		}
	}

	return r0
}

// MockEntity_MappedValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MappedValues'
type MockEntity_MappedValues_Call struct {
	*mock.Call
}

// MappedValues is a helper method to define mock.On call
func (_e *MockEntity_Expecter) MappedValues() *MockEntity_MappedValues_Call {
	return &MockEntity_MappedValues_Call{Call: _e.mock.On("MappedValues")}
}

func (_c *MockEntity_MappedValues_Call) Run(run func()) *MockEntity_MappedValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_MappedValues_Call) Return(_a0 map[string]driver.Value) *MockEntity_MappedValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntity_MappedValues_Call) RunAndReturn(run func() map[string]driver.Value) *MockEntity_MappedValues_Call {
	_c.Call.Return(run)
	return _c
}

// StringColumns provides a mock function with no fields
func (_m *MockEntity) StringColumns() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StringColumns")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockEntity_StringColumns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StringColumns'
type MockEntity_StringColumns_Call struct {
	*mock.Call
}

// StringColumns is a helper method to define mock.On call
func (_e *MockEntity_Expecter) StringColumns() *MockEntity_StringColumns_Call {
	return &MockEntity_StringColumns_Call{Call: _e.mock.On("StringColumns")}
}

func (_c *MockEntity_StringColumns_Call) Run(run func()) *MockEntity_StringColumns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_StringColumns_Call) Return(_a0 []string) *MockEntity_StringColumns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntity_StringColumns_Call) RunAndReturn(run func() []string) *MockEntity_StringColumns_Call {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function with no fields
func (_m *MockEntity) Values() []interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockEntity_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type MockEntity_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *MockEntity_Expecter) Values() *MockEntity_Values_Call {
	return &MockEntity_Values_Call{Call: _e.mock.On("Values")}
}

func (_c *MockEntity_Values_Call) Run(run func()) *MockEntity_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_Values_Call) Return(_a0 []interface{}) *MockEntity_Values_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntity_Values_Call) RunAndReturn(run func() []interface{}) *MockEntity_Values_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEntity creates a new instance of MockEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntity {
	mock := &MockEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
