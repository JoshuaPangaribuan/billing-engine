// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	context "context"

	usecases "github.com/JoshuaPangaribuan/billing-engine/internal/billing-engine/internal/usecases"
	mock "github.com/stretchr/testify/mock"
)

// MockMakePaymentUsecase is an autogenerated mock type for the MakePaymentUsecase type
type MockMakePaymentUsecase struct {
	mock.Mock
}

type MockMakePaymentUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMakePaymentUsecase) EXPECT() *MockMakePaymentUsecase_Expecter {
	return &MockMakePaymentUsecase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, input
func (_m *MockMakePaymentUsecase) Execute(ctx context.Context, input usecases.MakePaymentInput) (usecases.MakePaymentOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 usecases.MakePaymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecases.MakePaymentInput) (usecases.MakePaymentOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecases.MakePaymentInput) usecases.MakePaymentOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(usecases.MakePaymentOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecases.MakePaymentInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMakePaymentUsecase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockMakePaymentUsecase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecases.MakePaymentInput
func (_e *MockMakePaymentUsecase_Expecter) Execute(ctx interface{}, input interface{}) *MockMakePaymentUsecase_Execute_Call {
	return &MockMakePaymentUsecase_Execute_Call{Call: _e.mock.On("Execute", ctx, input)}
}

func (_c *MockMakePaymentUsecase_Execute_Call) Run(run func(ctx context.Context, input usecases.MakePaymentInput)) *MockMakePaymentUsecase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecases.MakePaymentInput))
	})
	return _c
}

func (_c *MockMakePaymentUsecase_Execute_Call) Return(_a0 usecases.MakePaymentOutput, _a1 error) *MockMakePaymentUsecase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMakePaymentUsecase_Execute_Call) RunAndReturn(run func(context.Context, usecases.MakePaymentInput) (usecases.MakePaymentOutput, error)) *MockMakePaymentUsecase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMakePaymentUsecase creates a new instance of MockMakePaymentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMakePaymentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMakePaymentUsecase {
	mock := &MockMakePaymentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
