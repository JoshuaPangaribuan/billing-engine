// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	context "context"

	entity "github.com/JoshuaPangaribuan/billing-engine/internal/billing-engine/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockGetOutstandingRepository is an autogenerated mock type for the GetOutstandingRepository type
type MockGetOutstandingRepository struct {
	mock.Mock
}

type MockGetOutstandingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetOutstandingRepository) EXPECT() *MockGetOutstandingRepository_Expecter {
	return &MockGetOutstandingRepository_Expecter{mock: &_m.Mock}
}

// GetOutstandingString provides a mock function with given fields: ctx, loanID
func (_m *MockGetOutstandingRepository) GetOutstandingString(ctx context.Context, loanID uint64) (string, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetOutstandingString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (string, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) string); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetOutstandingRepository_GetOutstandingString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutstandingString'
type MockGetOutstandingRepository_GetOutstandingString_Call struct {
	*mock.Call
}

// GetOutstandingString is a helper method to define mock.On call
//   - ctx context.Context
//   - loanID uint64
func (_e *MockGetOutstandingRepository_Expecter) GetOutstandingString(ctx interface{}, loanID interface{}) *MockGetOutstandingRepository_GetOutstandingString_Call {
	return &MockGetOutstandingRepository_GetOutstandingString_Call{Call: _e.mock.On("GetOutstandingString", ctx, loanID)}
}

func (_c *MockGetOutstandingRepository_GetOutstandingString_Call) Run(run func(ctx context.Context, loanID uint64)) *MockGetOutstandingRepository_GetOutstandingString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockGetOutstandingRepository_GetOutstandingString_Call) Return(_a0 string, _a1 error) *MockGetOutstandingRepository_GetOutstandingString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetOutstandingRepository_GetOutstandingString_Call) RunAndReturn(run func(context.Context, uint64) (string, error)) *MockGetOutstandingRepository_GetOutstandingString_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingInstallments provides a mock function with given fields: ctx, loanID
func (_m *MockGetOutstandingRepository) GetPendingInstallments(ctx context.Context, loanID uint64) ([]entity.Installment, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingInstallments")
	}

	var r0 []entity.Installment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]entity.Installment, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []entity.Installment); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Installment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetOutstandingRepository_GetPendingInstallments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingInstallments'
type MockGetOutstandingRepository_GetPendingInstallments_Call struct {
	*mock.Call
}

// GetPendingInstallments is a helper method to define mock.On call
//   - ctx context.Context
//   - loanID uint64
func (_e *MockGetOutstandingRepository_Expecter) GetPendingInstallments(ctx interface{}, loanID interface{}) *MockGetOutstandingRepository_GetPendingInstallments_Call {
	return &MockGetOutstandingRepository_GetPendingInstallments_Call{Call: _e.mock.On("GetPendingInstallments", ctx, loanID)}
}

func (_c *MockGetOutstandingRepository_GetPendingInstallments_Call) Run(run func(ctx context.Context, loanID uint64)) *MockGetOutstandingRepository_GetPendingInstallments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockGetOutstandingRepository_GetPendingInstallments_Call) Return(_a0 []entity.Installment, _a1 error) *MockGetOutstandingRepository_GetPendingInstallments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetOutstandingRepository_GetPendingInstallments_Call) RunAndReturn(run func(context.Context, uint64) ([]entity.Installment, error)) *MockGetOutstandingRepository_GetPendingInstallments_Call {
	_c.Call.Return(run)
	return _c
}

// IsCustomerExist provides a mock function with given fields: ctx, customerID
func (_m *MockGetOutstandingRepository) IsCustomerExist(ctx context.Context, customerID uint64) (bool, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for IsCustomerExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetOutstandingRepository_IsCustomerExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCustomerExist'
type MockGetOutstandingRepository_IsCustomerExist_Call struct {
	*mock.Call
}

// IsCustomerExist is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID uint64
func (_e *MockGetOutstandingRepository_Expecter) IsCustomerExist(ctx interface{}, customerID interface{}) *MockGetOutstandingRepository_IsCustomerExist_Call {
	return &MockGetOutstandingRepository_IsCustomerExist_Call{Call: _e.mock.On("IsCustomerExist", ctx, customerID)}
}

func (_c *MockGetOutstandingRepository_IsCustomerExist_Call) Run(run func(ctx context.Context, customerID uint64)) *MockGetOutstandingRepository_IsCustomerExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockGetOutstandingRepository_IsCustomerExist_Call) Return(_a0 bool, _a1 error) *MockGetOutstandingRepository_IsCustomerExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetOutstandingRepository_IsCustomerExist_Call) RunAndReturn(run func(context.Context, uint64) (bool, error)) *MockGetOutstandingRepository_IsCustomerExist_Call {
	_c.Call.Return(run)
	return _c
}

// IsLoanBelongsToCustomer provides a mock function with given fields: ctx, customerID, loanID
func (_m *MockGetOutstandingRepository) IsLoanBelongsToCustomer(ctx context.Context, customerID uint64, loanID uint64) (bool, error) {
	ret := _m.Called(ctx, customerID, loanID)

	if len(ret) == 0 {
		panic("no return value specified for IsLoanBelongsToCustomer")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) (bool, error)); ok {
		return rf(ctx, customerID, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) bool); ok {
		r0 = rf(ctx, customerID, loanID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, customerID, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoanBelongsToCustomer'
type MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call struct {
	*mock.Call
}

// IsLoanBelongsToCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID uint64
//   - loanID uint64
func (_e *MockGetOutstandingRepository_Expecter) IsLoanBelongsToCustomer(ctx interface{}, customerID interface{}, loanID interface{}) *MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call {
	return &MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call{Call: _e.mock.On("IsLoanBelongsToCustomer", ctx, customerID, loanID)}
}

func (_c *MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call) Run(run func(ctx context.Context, customerID uint64, loanID uint64)) *MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call) Return(_a0 bool, _a1 error) *MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call) RunAndReturn(run func(context.Context, uint64, uint64) (bool, error)) *MockGetOutstandingRepository_IsLoanBelongsToCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetOutstandingRepository creates a new instance of MockGetOutstandingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetOutstandingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetOutstandingRepository {
	mock := &MockGetOutstandingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
