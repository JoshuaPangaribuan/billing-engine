// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	context "context"

	entity "github.com/JoshuaPangaribuan/billing-engine/internal/billing-engine/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockCreateLoanRepository is an autogenerated mock type for the CreateLoanRepository type
type MockCreateLoanRepository struct {
	mock.Mock
}

type MockCreateLoanRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateLoanRepository) EXPECT() *MockCreateLoanRepository_Expecter {
	return &MockCreateLoanRepository_Expecter{mock: &_m.Mock}
}

// CreateInstallmentFromLoan provides a mock function with given fields: ctx, loan
func (_m *MockCreateLoanRepository) CreateInstallmentFromLoan(ctx context.Context, loan *entity.Loan) (bool, error) {
	ret := _m.Called(ctx, loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstallmentFromLoan")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Loan) (bool, error)); ok {
		return rf(ctx, loan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Loan) bool); ok {
		r0 = rf(ctx, loan)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Loan) error); ok {
		r1 = rf(ctx, loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateLoanRepository_CreateInstallmentFromLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstallmentFromLoan'
type MockCreateLoanRepository_CreateInstallmentFromLoan_Call struct {
	*mock.Call
}

// CreateInstallmentFromLoan is a helper method to define mock.On call
//   - ctx context.Context
//   - loan *entity.Loan
func (_e *MockCreateLoanRepository_Expecter) CreateInstallmentFromLoan(ctx interface{}, loan interface{}) *MockCreateLoanRepository_CreateInstallmentFromLoan_Call {
	return &MockCreateLoanRepository_CreateInstallmentFromLoan_Call{Call: _e.mock.On("CreateInstallmentFromLoan", ctx, loan)}
}

func (_c *MockCreateLoanRepository_CreateInstallmentFromLoan_Call) Run(run func(ctx context.Context, loan *entity.Loan)) *MockCreateLoanRepository_CreateInstallmentFromLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Loan))
	})
	return _c
}

func (_c *MockCreateLoanRepository_CreateInstallmentFromLoan_Call) Return(_a0 bool, _a1 error) *MockCreateLoanRepository_CreateInstallmentFromLoan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateLoanRepository_CreateInstallmentFromLoan_Call) RunAndReturn(run func(context.Context, *entity.Loan) (bool, error)) *MockCreateLoanRepository_CreateInstallmentFromLoan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLoan provides a mock function with given fields: ctx, loan
func (_m *MockCreateLoanRepository) CreateLoan(ctx context.Context, loan entity.Loan) (entity.Loan, error) {
	ret := _m.Called(ctx, loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 entity.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Loan) (entity.Loan, error)); ok {
		return rf(ctx, loan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Loan) entity.Loan); ok {
		r0 = rf(ctx, loan)
	} else {
		r0 = ret.Get(0).(entity.Loan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Loan) error); ok {
		r1 = rf(ctx, loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateLoanRepository_CreateLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoan'
type MockCreateLoanRepository_CreateLoan_Call struct {
	*mock.Call
}

// CreateLoan is a helper method to define mock.On call
//   - ctx context.Context
//   - loan entity.Loan
func (_e *MockCreateLoanRepository_Expecter) CreateLoan(ctx interface{}, loan interface{}) *MockCreateLoanRepository_CreateLoan_Call {
	return &MockCreateLoanRepository_CreateLoan_Call{Call: _e.mock.On("CreateLoan", ctx, loan)}
}

func (_c *MockCreateLoanRepository_CreateLoan_Call) Run(run func(ctx context.Context, loan entity.Loan)) *MockCreateLoanRepository_CreateLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Loan))
	})
	return _c
}

func (_c *MockCreateLoanRepository_CreateLoan_Call) Return(_a0 entity.Loan, _a1 error) *MockCreateLoanRepository_CreateLoan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateLoanRepository_CreateLoan_Call) RunAndReturn(run func(context.Context, entity.Loan) (entity.Loan, error)) *MockCreateLoanRepository_CreateLoan_Call {
	_c.Call.Return(run)
	return _c
}

// IsCustomerExist provides a mock function with given fields: ctx, customerID
func (_m *MockCreateLoanRepository) IsCustomerExist(ctx context.Context, customerID uint64) (bool, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for IsCustomerExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateLoanRepository_IsCustomerExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCustomerExist'
type MockCreateLoanRepository_IsCustomerExist_Call struct {
	*mock.Call
}

// IsCustomerExist is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID uint64
func (_e *MockCreateLoanRepository_Expecter) IsCustomerExist(ctx interface{}, customerID interface{}) *MockCreateLoanRepository_IsCustomerExist_Call {
	return &MockCreateLoanRepository_IsCustomerExist_Call{Call: _e.mock.On("IsCustomerExist", ctx, customerID)}
}

func (_c *MockCreateLoanRepository_IsCustomerExist_Call) Run(run func(ctx context.Context, customerID uint64)) *MockCreateLoanRepository_IsCustomerExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockCreateLoanRepository_IsCustomerExist_Call) Return(_a0 bool, _a1 error) *MockCreateLoanRepository_IsCustomerExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateLoanRepository_IsCustomerExist_Call) RunAndReturn(run func(context.Context, uint64) (bool, error)) *MockCreateLoanRepository_IsCustomerExist_Call {
	_c.Call.Return(run)
	return _c
}

// IsCustomerHasNonPaidLoan provides a mock function with given fields: ctx, customerID
func (_m *MockCreateLoanRepository) IsCustomerHasNonPaidLoan(ctx context.Context, customerID uint64) (bool, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for IsCustomerHasNonPaidLoan")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCustomerHasNonPaidLoan'
type MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call struct {
	*mock.Call
}

// IsCustomerHasNonPaidLoan is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID uint64
func (_e *MockCreateLoanRepository_Expecter) IsCustomerHasNonPaidLoan(ctx interface{}, customerID interface{}) *MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call {
	return &MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call{Call: _e.mock.On("IsCustomerHasNonPaidLoan", ctx, customerID)}
}

func (_c *MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call) Run(run func(ctx context.Context, customerID uint64)) *MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call) Return(_a0 bool, _a1 error) *MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call) RunAndReturn(run func(context.Context, uint64) (bool, error)) *MockCreateLoanRepository_IsCustomerHasNonPaidLoan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateLoanRepository creates a new instance of MockCreateLoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateLoanRepository {
	mock := &MockCreateLoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
