// Code generated by mockery. DO NOT EDIT.

package billingenginemocks

import (
	context "context"

	usecases "github.com/JoshuaPangaribuan/billing-engine/internal/billing-engine/internal/usecases"
	mock "github.com/stretchr/testify/mock"
)

// MockCreateLoanUsecase is an autogenerated mock type for the CreateLoanUsecase type
type MockCreateLoanUsecase struct {
	mock.Mock
}

type MockCreateLoanUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateLoanUsecase) EXPECT() *MockCreateLoanUsecase_Expecter {
	return &MockCreateLoanUsecase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, customerID
func (_m *MockCreateLoanUsecase) Execute(ctx context.Context, customerID uint64) (usecases.CreateLoanOutput, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 usecases.CreateLoanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (usecases.CreateLoanOutput, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) usecases.CreateLoanOutput); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(usecases.CreateLoanOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateLoanUsecase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCreateLoanUsecase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID uint64
func (_e *MockCreateLoanUsecase_Expecter) Execute(ctx interface{}, customerID interface{}) *MockCreateLoanUsecase_Execute_Call {
	return &MockCreateLoanUsecase_Execute_Call{Call: _e.mock.On("Execute", ctx, customerID)}
}

func (_c *MockCreateLoanUsecase_Execute_Call) Run(run func(ctx context.Context, customerID uint64)) *MockCreateLoanUsecase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockCreateLoanUsecase_Execute_Call) Return(_a0 usecases.CreateLoanOutput, _a1 error) *MockCreateLoanUsecase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateLoanUsecase_Execute_Call) RunAndReturn(run func(context.Context, uint64) (usecases.CreateLoanOutput, error)) *MockCreateLoanUsecase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateLoanUsecase creates a new instance of MockCreateLoanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateLoanUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateLoanUsecase {
	mock := &MockCreateLoanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
