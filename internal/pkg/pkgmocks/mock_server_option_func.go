// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	pkghttp "github.com/JoshuaPangaribuan/billing-engine/internal/pkg/pkghttp/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockServerOptionFunc is an autogenerated mock type for the ServerOptionFunc type
type MockServerOptionFunc struct {
	mock.Mock
}

type MockServerOptionFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerOptionFunc) EXPECT() *MockServerOptionFunc_Expecter {
	return &MockServerOptionFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockServerOptionFunc) Execute(_a0 *pkghttp.Server) {
	_m.Called(_a0)
}

// MockServerOptionFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockServerOptionFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *pkghttp.Server
func (_e *MockServerOptionFunc_Expecter) Execute(_a0 interface{}) *MockServerOptionFunc_Execute_Call {
	return &MockServerOptionFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockServerOptionFunc_Execute_Call) Run(run func(_a0 *pkghttp.Server)) *MockServerOptionFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pkghttp.Server))
	})
	return _c
}

func (_c *MockServerOptionFunc_Execute_Call) Return() *MockServerOptionFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerOptionFunc_Execute_Call) RunAndReturn(run func(*pkghttp.Server)) *MockServerOptionFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockServerOptionFunc creates a new instance of MockServerOptionFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerOptionFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerOptionFunc {
	mock := &MockServerOptionFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
