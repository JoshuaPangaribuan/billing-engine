// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	context "context"

	pkghttp "github.com/JoshuaPangaribuan/billing-engine/internal/pkg/pkghttp/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockEndpointHandler is an autogenerated mock type for the EndpointHandler type
type MockEndpointHandler struct {
	mock.Mock
}

type MockEndpointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEndpointHandler) EXPECT() *MockEndpointHandler_Expecter {
	return &MockEndpointHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, r
func (_m *MockEndpointHandler) Execute(ctx context.Context, r pkghttp.Request) (interface{}, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkghttp.Request) (interface{}, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkghttp.Request) interface{}); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkghttp.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEndpointHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockEndpointHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - r pkghttp.Request
func (_e *MockEndpointHandler_Expecter) Execute(ctx interface{}, r interface{}) *MockEndpointHandler_Execute_Call {
	return &MockEndpointHandler_Execute_Call{Call: _e.mock.On("Execute", ctx, r)}
}

func (_c *MockEndpointHandler_Execute_Call) Run(run func(ctx context.Context, r pkghttp.Request)) *MockEndpointHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkghttp.Request))
	})
	return _c
}

func (_c *MockEndpointHandler_Execute_Call) Return(response interface{}, err error) *MockEndpointHandler_Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockEndpointHandler_Execute_Call) RunAndReturn(run func(context.Context, pkghttp.Request) (interface{}, error)) *MockEndpointHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEndpointHandler creates a new instance of MockEndpointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEndpointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEndpointHandler {
	mock := &MockEndpointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
