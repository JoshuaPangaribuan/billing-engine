// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	pkghttp "github.com/JoshuaPangaribuan/billing-engine/internal/pkg/pkghttp/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockCodeMessageAware is an autogenerated mock type for the CodeMessageAware type
type MockCodeMessageAware struct {
	mock.Mock
}

type MockCodeMessageAware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodeMessageAware) EXPECT() *MockCodeMessageAware_Expecter {
	return &MockCodeMessageAware_Expecter{mock: &_m.Mock}
}

// CodeMessage provides a mock function with no fields
func (_m *MockCodeMessageAware) CodeMessage() pkghttp.CodeMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CodeMessage")
	}

	var r0 pkghttp.CodeMessage
	if rf, ok := ret.Get(0).(func() pkghttp.CodeMessage); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pkghttp.CodeMessage)
	}

	return r0
}

// MockCodeMessageAware_CodeMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CodeMessage'
type MockCodeMessageAware_CodeMessage_Call struct {
	*mock.Call
}

// CodeMessage is a helper method to define mock.On call
func (_e *MockCodeMessageAware_Expecter) CodeMessage() *MockCodeMessageAware_CodeMessage_Call {
	return &MockCodeMessageAware_CodeMessage_Call{Call: _e.mock.On("CodeMessage")}
}

func (_c *MockCodeMessageAware_CodeMessage_Call) Run(run func()) *MockCodeMessageAware_CodeMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCodeMessageAware_CodeMessage_Call) Return(_a0 pkghttp.CodeMessage) *MockCodeMessageAware_CodeMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodeMessageAware_CodeMessage_Call) RunAndReturn(run func() pkghttp.CodeMessage) *MockCodeMessageAware_CodeMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCodeMessageAware creates a new instance of MockCodeMessageAware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodeMessageAware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodeMessageAware {
	mock := &MockCodeMessageAware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
