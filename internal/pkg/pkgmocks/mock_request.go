// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// MockRequest is an autogenerated mock type for the Request type
type MockRequest struct {
	mock.Mock
}

type MockRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequest) EXPECT() *MockRequest_Expecter {
	return &MockRequest_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: v
func (_m *MockRequest) Decode(v interface{}) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequest_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockRequest_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - v interface{}
func (_e *MockRequest_Expecter) Decode(v interface{}) *MockRequest_Decode_Call {
	return &MockRequest_Decode_Call{Call: _e.mock.On("Decode", v)}
}

func (_c *MockRequest_Decode_Call) Run(run func(v interface{})) *MockRequest_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockRequest_Decode_Call) Return(_a0 error) *MockRequest_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Decode_Call) RunAndReturn(run func(interface{}) error) *MockRequest_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *MockRequest) Header() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockRequest_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockRequest_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Header() *MockRequest_Header_Call {
	return &MockRequest_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockRequest_Header_Call) Run(run func()) *MockRequest_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Header_Call) Return(_a0 http.Header) *MockRequest_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Header_Call) RunAndReturn(run func() http.Header) *MockRequest_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Raw provides a mock function with no fields
func (_m *MockRequest) Raw() *http.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Raw")
	}

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// MockRequest_Raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Raw'
type MockRequest_Raw_Call struct {
	*mock.Call
}

// Raw is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Raw() *MockRequest_Raw_Call {
	return &MockRequest_Raw_Call{Call: _e.mock.On("Raw")}
}

func (_c *MockRequest_Raw_Call) Run(run func()) *MockRequest_Raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Raw_Call) Return(_a0 *http.Request) *MockRequest_Raw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Raw_Call) RunAndReturn(run func() *http.Request) *MockRequest_Raw_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function with no fields
func (_m *MockRequest) URL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// MockRequest_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type MockRequest_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
func (_e *MockRequest_Expecter) URL() *MockRequest_URL_Call {
	return &MockRequest_URL_Call{Call: _e.mock.On("URL")}
}

func (_c *MockRequest_URL_Call) Run(run func()) *MockRequest_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_URL_Call) Return(_a0 *url.URL) *MockRequest_URL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_URL_Call) RunAndReturn(run func() *url.URL) *MockRequest_URL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequest creates a new instance of MockRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequest {
	mock := &MockRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
