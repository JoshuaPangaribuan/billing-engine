// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockHeaderAware is an autogenerated mock type for the HeaderAware type
type MockHeaderAware struct {
	mock.Mock
}

type MockHeaderAware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeaderAware) EXPECT() *MockHeaderAware_Expecter {
	return &MockHeaderAware_Expecter{mock: &_m.Mock}
}

// Headers provides a mock function with no fields
func (_m *MockHeaderAware) Headers() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockHeaderAware_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type MockHeaderAware_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
func (_e *MockHeaderAware_Expecter) Headers() *MockHeaderAware_Headers_Call {
	return &MockHeaderAware_Headers_Call{Call: _e.mock.On("Headers")}
}

func (_c *MockHeaderAware_Headers_Call) Run(run func()) *MockHeaderAware_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderAware_Headers_Call) Return(_a0 http.Header) *MockHeaderAware_Headers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeaderAware_Headers_Call) RunAndReturn(run func() http.Header) *MockHeaderAware_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHeaderAware creates a new instance of MockHeaderAware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeaderAware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeaderAware {
	mock := &MockHeaderAware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
