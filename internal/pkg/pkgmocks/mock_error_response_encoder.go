// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockErrorResponseEncoder is an autogenerated mock type for the ErrorResponseEncoder type
type MockErrorResponseEncoder struct {
	mock.Mock
}

type MockErrorResponseEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorResponseEncoder) EXPECT() *MockErrorResponseEncoder_Expecter {
	return &MockErrorResponseEncoder_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, err, w
func (_m *MockErrorResponseEncoder) Execute(ctx context.Context, err error, w http.ResponseWriter) {
	_m.Called(ctx, err, w)
}

// MockErrorResponseEncoder_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockErrorResponseEncoder_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
//   - w http.ResponseWriter
func (_e *MockErrorResponseEncoder_Expecter) Execute(ctx interface{}, err interface{}, w interface{}) *MockErrorResponseEncoder_Execute_Call {
	return &MockErrorResponseEncoder_Execute_Call{Call: _e.mock.On("Execute", ctx, err, w)}
}

func (_c *MockErrorResponseEncoder_Execute_Call) Run(run func(ctx context.Context, err error, w http.ResponseWriter)) *MockErrorResponseEncoder_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error), args[2].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockErrorResponseEncoder_Execute_Call) Return() *MockErrorResponseEncoder_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorResponseEncoder_Execute_Call) RunAndReturn(run func(context.Context, error, http.ResponseWriter)) *MockErrorResponseEncoder_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockErrorResponseEncoder creates a new instance of MockErrorResponseEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorResponseEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorResponseEncoder {
	mock := &MockErrorResponseEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
