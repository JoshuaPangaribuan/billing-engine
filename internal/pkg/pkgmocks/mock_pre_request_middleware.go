// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	pkghttp "github.com/JoshuaPangaribuan/billing-engine/internal/pkg/pkghttp/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockPreRequestMiddleware is an autogenerated mock type for the PreRequestMiddleware type
type MockPreRequestMiddleware struct {
	mock.Mock
}

type MockPreRequestMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPreRequestMiddleware) EXPECT() *MockPreRequestMiddleware_Expecter {
	return &MockPreRequestMiddleware_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: next
func (_m *MockPreRequestMiddleware) Execute(next pkghttp.EndpointHandler) pkghttp.EndpointHandler {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 pkghttp.EndpointHandler
	if rf, ok := ret.Get(0).(func(pkghttp.EndpointHandler) pkghttp.EndpointHandler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkghttp.EndpointHandler)
		}
	}

	return r0
}

// MockPreRequestMiddleware_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockPreRequestMiddleware_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - next pkghttp.EndpointHandler
func (_e *MockPreRequestMiddleware_Expecter) Execute(next interface{}) *MockPreRequestMiddleware_Execute_Call {
	return &MockPreRequestMiddleware_Execute_Call{Call: _e.mock.On("Execute", next)}
}

func (_c *MockPreRequestMiddleware_Execute_Call) Run(run func(next pkghttp.EndpointHandler)) *MockPreRequestMiddleware_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pkghttp.EndpointHandler))
	})
	return _c
}

func (_c *MockPreRequestMiddleware_Execute_Call) Return(_a0 pkghttp.EndpointHandler) *MockPreRequestMiddleware_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreRequestMiddleware_Execute_Call) RunAndReturn(run func(pkghttp.EndpointHandler) pkghttp.EndpointHandler) *MockPreRequestMiddleware_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPreRequestMiddleware creates a new instance of MockPreRequestMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPreRequestMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPreRequestMiddleware {
	mock := &MockPreRequestMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
