// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// MockRequestReadWriter is an autogenerated mock type for the RequestReadWriter type
type MockRequestReadWriter struct {
	mock.Mock
}

type MockRequestReadWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestReadWriter) EXPECT() *MockRequestReadWriter_Expecter {
	return &MockRequestReadWriter_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: v
func (_m *MockRequestReadWriter) Decode(v interface{}) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequestReadWriter_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockRequestReadWriter_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - v interface{}
func (_e *MockRequestReadWriter_Expecter) Decode(v interface{}) *MockRequestReadWriter_Decode_Call {
	return &MockRequestReadWriter_Decode_Call{Call: _e.mock.On("Decode", v)}
}

func (_c *MockRequestReadWriter_Decode_Call) Run(run func(v interface{})) *MockRequestReadWriter_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockRequestReadWriter_Decode_Call) Return(_a0 error) *MockRequestReadWriter_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestReadWriter_Decode_Call) RunAndReturn(run func(interface{}) error) *MockRequestReadWriter_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: v
func (_m *MockRequestReadWriter) Encode(v interface{}) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequestReadWriter_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockRequestReadWriter_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - v interface{}
func (_e *MockRequestReadWriter_Expecter) Encode(v interface{}) *MockRequestReadWriter_Encode_Call {
	return &MockRequestReadWriter_Encode_Call{Call: _e.mock.On("Encode", v)}
}

func (_c *MockRequestReadWriter_Encode_Call) Run(run func(v interface{})) *MockRequestReadWriter_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockRequestReadWriter_Encode_Call) Return(_a0 error) *MockRequestReadWriter_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestReadWriter_Encode_Call) RunAndReturn(run func(interface{}) error) *MockRequestReadWriter_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *MockRequestReadWriter) Header() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockRequestReadWriter_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockRequestReadWriter_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockRequestReadWriter_Expecter) Header() *MockRequestReadWriter_Header_Call {
	return &MockRequestReadWriter_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockRequestReadWriter_Header_Call) Run(run func()) *MockRequestReadWriter_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestReadWriter_Header_Call) Return(_a0 http.Header) *MockRequestReadWriter_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestReadWriter_Header_Call) RunAndReturn(run func() http.Header) *MockRequestReadWriter_Header_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function with no fields
func (_m *MockRequestReadWriter) URL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// MockRequestReadWriter_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type MockRequestReadWriter_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
func (_e *MockRequestReadWriter_Expecter) URL() *MockRequestReadWriter_URL_Call {
	return &MockRequestReadWriter_URL_Call{Call: _e.mock.On("URL")}
}

func (_c *MockRequestReadWriter_URL_Call) Run(run func()) *MockRequestReadWriter_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestReadWriter_URL_Call) Return(_a0 *url.URL) *MockRequestReadWriter_URL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestReadWriter_URL_Call) RunAndReturn(run func() *url.URL) *MockRequestReadWriter_URL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestReadWriter creates a new instance of MockRequestReadWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestReadWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestReadWriter {
	mock := &MockRequestReadWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
